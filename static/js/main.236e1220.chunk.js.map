{"version":3,"sources":["reducers/todoReducer.ts","reducers/index.ts","containers/Header.tsx","components/AddItem.tsx","actions/todos.ts","components/Filter.tsx","components/ToDoItem.tsx","containers/ToDoList.tsx","App.tsx","index.tsx"],"names":["defaultToDo","toDoList","filterType","middleware","applyMiddleware","logger","reducers","combineReducers","toDos","state","arguments","length","undefined","action","uuid","require","type","newId","Object","objectSpread","defineProperty","id","value","payload","status","newStatus","newValue","store","createStore","Header","react","className","AppBar_default","a","Toolbar_default","Typography_default","variant","color","React","AddItem","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","newItemText","addToDoItem","setState","updateText","event","target","Paper_default","elevation","TextField_default","label","fullWidth","onChange","IconButton_default","aria-label","onClick","AddCircle_default","connect","dispatch","FilterList","handleChange","changeFilter","FormControl_default","FormLabel_default","Grid_default","container","RadioGroup_default","option","style","flexDirection","FormControlLabel_default","control","Radio_default","ToDoItem","newItem","toggleStatus","item","updateItem","isEditing","removeItem","toggleEdit","renderForm","ListItem_default","width","Save_default","Divider_default","renderItem","itemClass","button","Checkbox_default","checked","isFiltered","ListItemText_default","primary","ListItemSecondaryAction_default","Edit_default","Delete_default","ToDoList","toggleItem","toggleFilters","applyFilter","loadList","map","index","components_ToDoItem","key","todos","filterActive","persistedState","localStorage","getItem","JSON","parse","loadStore","concat","components_AddItem","Filter","xs","List_default","list","keys","filter","getListFromStore","toConsumableArray","sort","b","initList","App","CssBaseline_default","containers_Header","containers_ToDoList","subscribe","setItem","stringify","getState","ReactDOM","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.236e1220.chunk.js","sourcesContent":["import { IAction, IToDoStore } from \"../model/store\";\r\n\r\nexport const defaultToDo: IToDoStore = {\r\n  toDoList: {},\r\n  filterType: \"all\"\r\n};\r\n\r\nexport default function todoReducer(\r\n  state: IToDoStore = defaultToDo,\r\n  action: IAction\r\n): IToDoStore {\r\n  const uuid = require(\"uuid/v4\");\r\n\r\n  switch (action.type) {\r\n    case \"ADD_NEW_ITEM\": {\r\n      const newId = uuid();\r\n      return {\r\n        ...state,\r\n        toDoList: {\r\n          ...state.toDoList,\r\n          [newId]: { id: newId, value: action.payload, status: false }\r\n        }\r\n      };\r\n    }\r\n    case \"UPDATE_ADD_ITEM_TEXT\": {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n    case \"APPLY_FILTER\": {\r\n      return {\r\n        ...state,\r\n        filterType: action.payload\r\n      };\r\n    }\r\n    case \"REMOVE_ITEM\": {\r\n      if (state.toDoList[action.payload]) {\r\n        delete state.toDoList[action.payload];\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toDoList: { ...state.toDoList }\r\n      };\r\n    }\r\n    case \"TOGGLE_ITEM\": {\r\n      const newStatus = !state.toDoList[action.payload].status;\r\n      state.toDoList[action.payload].status = newStatus;\r\n\r\n      return {\r\n        ...state,\r\n        toDoList: { ...state.toDoList }\r\n      };\r\n    }\r\n    case \"UPDATE_ITEM\": {\r\n      state.toDoList[action.payload.id].value = action.payload.newValue;\r\n\r\n      return {\r\n        ...state,\r\n        toDoList: { ...state.toDoList }\r\n      };\r\n    }\r\n    case \"LOAD_STORE\": {\r\n      if (action.payload.toDos != null) {\r\n        return { ...action.payload.toDos };\r\n      }\r\n    }\r\n    case \"INIT_TODO_LIST\": {\r\n      return { ...state };\r\n    }\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n}\r\n","import logger from \"redux-logger\";\r\nimport toDos from \"./todoReducer\";\r\n\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\n\r\nconst middleware = applyMiddleware(logger);\r\nconst reducers = combineReducers({ toDos });\r\n\r\nexport const store = createStore(reducers, middleware);\r\n","import * as React from \"react\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nclass Header extends React.Component<{}, {}> {\r\n  public render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <AppBar>\r\n          <Toolbar>\r\n            <Typography variant=\"title\" color=\"inherit\">\r\n              To Do List\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import * as React from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport AddIcon from \"@material-ui/icons/AddCircle\";\r\n\r\nimport { addToDoItem } from \"../actions/todos\";\r\n\r\ninterface IDispatchFromProps {\r\n  addToDoItem: (value: string) => void;\r\n}\r\n\r\ninterface IState {\r\n  newItemText: string;\r\n}\r\n\r\nclass AddItem extends React.Component<IDispatchFromProps, IState> {\r\n  constructor(props: IDispatchFromProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      newItemText: \"\"\r\n    };\r\n  }\r\n\r\n  private handleClick = () => {\r\n    if (this.state.newItemText) {\r\n      this.props.addToDoItem(this.state.newItemText);\r\n      this.setState({ newItemText: \"\" });\r\n    }\r\n  };\r\n\r\n  private updateText = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({ newItemText: event.target.value });\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <Paper className=\"add-item\" elevation={1}>\r\n        <TextField\r\n          label=\"Enter New Item\"\r\n          className=\"add-item-text\"\r\n          fullWidth={true}\r\n          onChange={this.updateText}\r\n          value={this.state.newItemText}\r\n        />\r\n        <IconButton aria-label=\"Add\" onClick={this.handleClick}>\r\n          <AddIcon />\r\n        </IconButton>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): IDispatchFromProps => ({\r\n  addToDoItem: (value: string) => dispatch(addToDoItem(value))\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(AddItem);\r\n","import { IAction, IReduxStore } from \"../model/store\";\r\n\r\nexport function addToDoItem(value: string): IAction {\r\n  return {\r\n    type: \"ADD_NEW_ITEM\",\r\n    payload: value\r\n  };\r\n}\r\n\r\nexport function updateAddItem(value: string): IAction {\r\n  return {\r\n    type: \"UPDATE_ADD_ITEM_TEXT\",\r\n    payload: value\r\n  };\r\n}\r\n\r\nexport function toggleItem(id: string): IAction {\r\n  return {\r\n    type: \"TOGGLE_ITEM\",\r\n    payload: id\r\n  };\r\n}\r\n\r\nexport function removeItem(id: string): IAction {\r\n  return {\r\n    type: \"REMOVE_ITEM\",\r\n    payload: id\r\n  };\r\n}\r\n\r\nexport function updateItem(itemId: string, newText: string): IAction {\r\n  return {\r\n    type: \"UPDATE_ITEM\",\r\n    payload: { id: itemId, newValue: newText }\r\n  };\r\n}\r\n\r\nexport function applyFilter(filterName: string): IAction {\r\n  return {\r\n    type: \"APPLY_FILTER\",\r\n    payload: filterName\r\n  };\r\n}\r\n\r\nexport function loadStore(list: IReduxStore) {\r\n  return {\r\n    type: \"LOAD_STORE\",\r\n    payload: list\r\n  };\r\n}\r\n\r\nexport function initToDoList(): IAction {\r\n  return {\r\n    type: \"INIT_TODO_LIST\",\r\n    payload: \"\"\r\n  };\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\ninterface IProps {\r\n  option: string;\r\n  changeFilter: (value: string) => void;\r\n}\r\n\r\nclass FilterList extends React.Component<IProps, {}> {\r\n  private handleChange = (event: any) => {\r\n    this.props.changeFilter(event.target.value);\r\n  };\r\n  public render() {\r\n    return (\r\n      <FormControl>\r\n        <FormLabel>Filter</FormLabel>\r\n        <Grid container={true}>\r\n          <RadioGroup\r\n            value={this.props.option}\r\n            onChange={this.handleChange}\r\n            style={{ flexDirection: \"row\" }}\r\n          >\r\n            <FormControlLabel\r\n              value=\"all\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"All\"\r\n              className=\"MuiGrid-grid-sm-4-100\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"active\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"Active\"\r\n              className=\"MuiGrid-grid-sm-4-100\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"completed\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"Completed\"\r\n              className=\"MuiGrid-grid-sm-4-100\"\r\n            />\r\n          </RadioGroup>\r\n        </Grid>\r\n      </FormControl>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterList;\r\n","import * as React from \"react\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport { IToDoItem } from \"../model/store\";\r\n\r\ninterface IProps {\r\n  index: number;\r\n  item: IToDoItem;\r\n  isFiltered: boolean;\r\n  handleClick: (id: string, type: string, newValue?: string) => void;\r\n}\r\n\r\ninterface IStates {\r\n  isEditing: boolean;\r\n  newItem: string;\r\n}\r\n\r\nclass ToDoItem extends React.Component<IProps, IStates> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      isEditing: false,\r\n      newItem: this.props.item.value\r\n    };\r\n  }\r\n\r\n  private handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({ newItem: event.target.value });\r\n  };\r\n\r\n  private toggleStatus = () => {\r\n    this.props.handleClick(this.props.item.id, \"status\");\r\n  };\r\n\r\n  private updateItem = () => {\r\n    this.setState({ isEditing: false });\r\n    this.props.handleClick(this.props.item.id, \"update\", this.state.newItem);\r\n  };\r\n\r\n  private removeItem = () => {\r\n    this.props.handleClick(this.props.item.id, \"remove\");\r\n  };\r\n\r\n  private toggleEdit = () => {\r\n    this.setState({ isEditing: true });\r\n  };\r\n\r\n  private renderForm = () => {\r\n    return (\r\n      <div>\r\n        <ListItem>\r\n          <TextField\r\n            style={{ width: \"100%\" }}\r\n            onChange={this.handleChange}\r\n            value={this.state.newItem}\r\n          />\r\n\r\n          <IconButton aria-label=\"Save\" onClick={this.updateItem}>\r\n            <SaveIcon />\r\n          </IconButton>\r\n        </ListItem>\r\n        <Divider />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  private renderItem = () => {\r\n    const itemClass = this.props.item.status ? \"completed\" : \"active\";\r\n    return (\r\n      <div>\r\n        <ListItem\r\n          className={itemClass}\r\n          onClick={this.toggleStatus}\r\n          button={true}\r\n        >\r\n          <Checkbox\r\n            checked={this.props.item.status}\r\n            color={this.props.isFiltered ? \"secondary\" : \"default\"}\r\n          />\r\n          <ListItemText primary={this.props.item.value} />\r\n          <ListItemSecondaryAction>\r\n            <IconButton aria-label=\"Edit\" onClick={this.toggleEdit}>\r\n              <EditIcon />\r\n            </IconButton>\r\n            <IconButton aria-label=\"Delete\" onClick={this.removeItem}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n        <Divider />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  public render() {\r\n    if (!this.props.isFiltered) {\r\n      return <div />;\r\n    } else if (this.state.isEditing) {\r\n      return this.renderForm();\r\n    } else {\r\n      return this.renderItem();\r\n    }\r\n  }\r\n}\r\n\r\nexport default ToDoItem;\r\n","import * as React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nimport {\r\n  applyFilter,\r\n  initToDoList,\r\n  loadStore,\r\n  removeItem,\r\n  toggleItem,\r\n  updateItem\r\n} from \"../actions/todos\";\r\nimport AddItem from \"../components/AddItem\";\r\nimport FilterList from \"../components/Filter\";\r\nimport ToDoItem from \"../components/ToDoItem\";\r\nimport { IReduxStore, IToDoItem, ITodoList } from \"../model/store\";\r\n\r\ninterface IStoreProps {\r\n  todos: ITodoList;\r\n  filterType: string;\r\n}\r\n\r\ninterface IDispatchFromProps {\r\n  initList: () => void;\r\n  loadStore: (store: IReduxStore) => void;\r\n  toggleItem: (id: string) => void;\r\n  removeItem: (id: string) => void;\r\n  updateItem: (id: string, newValue: string) => void;\r\n  applyFilter: (value: string) => void;\r\n}\r\n\r\ninterface IStates {\r\n  toDoList: IToDoItem[];\r\n  filterActive: boolean;\r\n}\r\n\r\nclass ToDoList extends React.Component<\r\n  IStoreProps & IDispatchFromProps,\r\n  IStates\r\n> {\r\n  constructor(props: IStoreProps & IDispatchFromProps) {\r\n    super(props);\r\n    this.state = {\r\n      toDoList: [],\r\n      filterActive: false\r\n    };\r\n  }\r\n\r\n  private handleClick = (id: string, type: string, newValue?: string) => {\r\n    switch (type) {\r\n      case \"remove\":\r\n        this.props.removeItem(id);\r\n        break;\r\n      case \"status\":\r\n        this.props.toggleItem(id);\r\n        break;\r\n      case \"update\":\r\n        if (newValue) {\r\n          this.props.updateItem(id, newValue);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  private toggleFilters = (value: string) => {\r\n    this.props.applyFilter(value);\r\n  };\r\n\r\n  private loadList = () => {\r\n    return this.state.toDoList.map((item, index) => {\r\n      let isFiltered = true;\r\n      if (this.props.filterType === \"active\" && item.status) {\r\n        isFiltered = false;\r\n      } else if (this.props.filterType === \"completed\" && !item.status) {\r\n        isFiltered = false;\r\n      }\r\n\r\n      return (\r\n        <ToDoItem\r\n          key={index}\r\n          index={index}\r\n          item={this.props.todos[item.id]}\r\n          handleClick={this.handleClick}\r\n          isFiltered={isFiltered}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  public static getListFromStore = (\r\n    toDoList: ITodoList,\r\n    filterType: string\r\n  ) => {\r\n    let list = Object.keys(toDoList).map(key => {\r\n      return toDoList[key];\r\n    });\r\n\r\n    if (filterType === \"active\") {\r\n      list = list.sort((a, b) => {\r\n        if (a.status) {\r\n          return 1;\r\n        } else if (b.status) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n    } else if (filterType === \"completed\") {\r\n      list = list.sort((a, b) => {\r\n        if (a.status) {\r\n          return -1;\r\n        } else if (b.status) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n\r\n    return list;\r\n  };\r\n\r\n  public static getDerivedStateFromProps(\r\n    props: IStoreProps & IDispatchFromProps,\r\n    state: IStates\r\n  ) {\r\n    let list = Object.keys(props.todos).map(key => {\r\n      return props.todos[key];\r\n    });\r\n    let filter = true;\r\n\r\n    if (props.filterType === \"all\") {\r\n      filter = false;\r\n    } else {\r\n      list = ToDoList.getListFromStore(props.todos, props.filterType);\r\n    }\r\n\r\n    return {\r\n      toDoList: [...list],\r\n      filterActive: filter\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    // Get saved user data from cache\r\n    const persistedState = localStorage.getItem(\"reduxState\")\r\n      ? JSON.parse(localStorage.getItem(\"reduxState\") || \"\")\r\n      : {};\r\n    if (persistedState) {\r\n      this.props.loadStore(persistedState);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Grid\r\n        className={`main-grid filter-${this.props.filterType}`}\r\n        container={true}\r\n      >\r\n        <AddItem />\r\n        <FilterList\r\n          option={this.props.filterType}\r\n          changeFilter={this.toggleFilters}\r\n        />\r\n        <Grid item={true} xs={12} className=\"list-container\">\r\n          <List className=\"list\">{this.loadList()}</List>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): IDispatchFromProps => ({\r\n  initList: () => dispatch(initToDoList()),\r\n  loadStore: (store: IReduxStore) => dispatch(loadStore(store)),\r\n  toggleItem: (id: string) => dispatch(toggleItem(id)),\r\n  removeItem: (id: string) => dispatch(removeItem(id)),\r\n  updateItem: (id: string, newValue: string) =>\r\n    dispatch(updateItem(id, newValue)),\r\n  applyFilter: (value: string) => dispatch(applyFilter(value))\r\n});\r\n\r\nconst mapStateToProps = (store: IReduxStore) => {\r\n  return {\r\n    todos: store.toDos.toDoList,\r\n    filterType: store.toDos.filterType\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ToDoList);\r\n","import * as React from \"react\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nimport Header from \"./containers/Header\";\r\nimport ToDoList from \"./containers/ToDoList\";\r\n\r\nclass App extends React.Component<{}, {}> {\r\n  public render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <CssBaseline />\r\n        <div className=\"page\">\r\n          <Header />\r\n          <div className=\"inner-page\">\r\n            <ToDoList />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./reducers\";\r\n\r\nimport App from \"./App\";\r\n\r\nimport \"./styles/index.scss\";\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(\"reduxState\", JSON.stringify(store.getState()));\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\") as HTMLElement\r\n);\r\n"],"sourceRoot":""}