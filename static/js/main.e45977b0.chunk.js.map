{"version":3,"sources":["reducers/todoReducer.ts","reducers/index.ts","components/Header.tsx","components/AddItemForm.tsx","containers/AddItemFormContainer.ts","actions/todos.ts","components/FilterControls.tsx","containers/FilterControlContainer.ts","components/ToDoItem.tsx","containers/ToDoItemContainer.ts","components/ToDoList.tsx","containers/ToDoListContainer.ts","App.tsx","index.tsx"],"names":["defaultToDo","toDoList","filterType","reducers","combineReducers","toDos","state","arguments","length","undefined","action","type","newId","uuid","Object","objectSpread","defineProperty","id","value","payload","isCompleted","newValue","store","createStore","Header","react","className","AppBar_default","a","Toolbar_default","Typography_default","variant","color","React","AddItemForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","newItemText","addToDoItem","setState","updateText","event","target","Paper_default","elevation","TextField_default","label","fullWidth","onChange","IconButton_default","aria-label","onClick","AddCircle_default","AddItemContainer","connect","dispatch","FilterControls","handleChange","applyFilter","FormControl_default","FormLabel_default","Grid_default","container","RadioGroup_default","style","flexDirection","FormControlLabel_default","control","Radio_default","FilterControlContainer","ToDoItem","onTextUpdate","newItem","toggleStatus","toggleItem","updateItem","isEditing","removeItem","toggleEdit","renderForm","ListItem_default","width","Save_default","Divider_default","renderItem","itemClass","button","Checkbox_default","checked","ListItemText_default","primary","ListItemSecondaryAction_default","Edit_default","Delete_default","ToDoItemContainer","ToDoList","item","xs","concat","List_default","map","index","containers_ToDoItemContainer","key","ToDoListContainer","keys","filter","initList","App","persistedState","localStorage","getItem","JSON","parse","loadStore","CssBaseline_default","components_Header","AddItemFormContainer","containers_FilterControlContainer","containers_ToDoListContainer","href","subscribe","setItem","stringify","getState","ReactDOM","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e45977b0.chunk.js","sourcesContent":["import uuid from \"uuid\";\r\nimport { IAction, IToDoStore } from \"../model/store\";\r\n\r\nexport const defaultToDo: IToDoStore = {\r\n  toDoList: {},\r\n  filterType: \"all\"\r\n};\r\n\r\nexport default function todoReducer(\r\n  state: IToDoStore = defaultToDo,\r\n  action: IAction\r\n): IToDoStore {\r\n  switch (action.type) {\r\n    case \"ADD_NEW_ITEM\": {\r\n      const newId = uuid();\r\n      return {\r\n        ...state,\r\n        toDoList: {\r\n          ...state.toDoList,\r\n          [newId]: { id: newId, value: action.payload, isCompleted: false }\r\n        }\r\n      };\r\n    }\r\n    case \"UPDATE_ADD_ITEM_TEXT\": {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n    case \"APPLY_FILTER\": {\r\n      return {\r\n        ...state,\r\n        filterType: action.payload\r\n      };\r\n    }\r\n    case \"REMOVE_ITEM\": {\r\n      if (state.toDoList[action.payload]) {\r\n        delete state.toDoList[action.payload];\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toDoList: { ...state.toDoList }\r\n      };\r\n    }\r\n    case \"TOGGLE_ITEM\": {\r\n      state.toDoList[action.payload].isCompleted = !state.toDoList[\r\n        action.payload\r\n      ].isCompleted;\r\n\r\n      return {\r\n        ...state,\r\n        toDoList: { ...state.toDoList }\r\n      };\r\n    }\r\n    case \"UPDATE_ITEM\": {\r\n      state.toDoList[action.payload.id].value = action.payload.newValue;\r\n\r\n      return {\r\n        ...state,\r\n        toDoList: { ...state.toDoList }\r\n      };\r\n    }\r\n    case \"LOAD_STORE\": {\r\n      if (action.payload.toDos != null) {\r\n        return { ...action.payload.toDos };\r\n      }\r\n    }\r\n    case \"INIT_TODO_LIST\": {\r\n      return { ...state };\r\n    }\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n}\r\n","import logger from \"redux-logger\";\r\nimport toDos from \"./todoReducer\";\r\n\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\n\r\nlet middleware = {};\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  middleware = applyMiddleware(logger);\r\n}\r\n\r\nconst reducers = combineReducers({ toDos });\r\n\r\nexport const store = createStore(reducers, middleware);\r\n","import * as React from \"react\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nclass Header extends React.Component<{}, {}> {\r\n  public render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <AppBar>\r\n          <Toolbar>\r\n            <Typography variant=\"title\" color=\"inherit\">\r\n              To Do List\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import * as React from \"react\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport AddIcon from \"@material-ui/icons/AddCircle\";\r\n\r\ninterface IProps {\r\n  addToDoItem: (value: string) => void;\r\n}\r\n\r\ninterface IState {\r\n  newItemText: string;\r\n}\r\n\r\nclass AddItemForm extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      newItemText: \"\"\r\n    };\r\n  }\r\n\r\n  private handleClick = () => {\r\n    if (this.state.newItemText) {\r\n      this.props.addToDoItem(this.state.newItemText);\r\n      this.setState({ newItemText: \"\" });\r\n    }\r\n  };\r\n\r\n  private updateText = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({ newItemText: event.target.value });\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <Paper className=\"add-item\" elevation={1}>\r\n        <TextField\r\n          label=\"Enter New Item\"\r\n          className=\"add-item-text\"\r\n          fullWidth={true}\r\n          onChange={this.updateText}\r\n          value={this.state.newItemText}\r\n        />\r\n        <IconButton aria-label=\"Add\" onClick={this.handleClick}>\r\n          <AddIcon />\r\n        </IconButton>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddItemForm;\r\n","import AddItemForm from \"../components/AddItemForm\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nimport { addToDoItem } from \"../actions/todos\";\r\n\r\ninterface IAddItemProps {\r\n  addToDoItem: (value: string) => void;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): IAddItemProps => ({\r\n  addToDoItem: (value: string) => dispatch(addToDoItem(value))\r\n});\r\n\r\nconst AddItemContainer = connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(AddItemForm);\r\n\r\nexport default AddItemContainer;\r\n","import { IAction, IReduxStore } from \"../model/store\";\r\n\r\nexport function addToDoItem(value: string): IAction {\r\n  return {\r\n    type: \"ADD_NEW_ITEM\",\r\n    payload: value\r\n  };\r\n}\r\n\r\nexport function updateAddItem(value: string): IAction {\r\n  return {\r\n    type: \"UPDATE_ADD_ITEM_TEXT\",\r\n    payload: value\r\n  };\r\n}\r\n\r\nexport function toggleItem(id: string): IAction {\r\n  return {\r\n    type: \"TOGGLE_ITEM\",\r\n    payload: id\r\n  };\r\n}\r\n\r\nexport function removeItem(id: string): IAction {\r\n  return {\r\n    type: \"REMOVE_ITEM\",\r\n    payload: id\r\n  };\r\n}\r\n\r\nexport function updateItem(itemId: string, newText: string): IAction {\r\n  return {\r\n    type: \"UPDATE_ITEM\",\r\n    payload: { id: itemId, newValue: newText }\r\n  };\r\n}\r\n\r\nexport function applyFilter(filterName: string): IAction {\r\n  return {\r\n    type: \"APPLY_FILTER\",\r\n    payload: filterName\r\n  };\r\n}\r\n\r\nexport function loadStore(list: IReduxStore) {\r\n  return {\r\n    type: \"LOAD_STORE\",\r\n    payload: list\r\n  };\r\n}\r\n\r\nexport function initToDoList(): IAction {\r\n  return {\r\n    type: \"INIT_TODO_LIST\",\r\n    payload: \"\"\r\n  };\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport {\r\n  IFilterControlDispatch,\r\n  IFilterControlProps\r\n} from \"../containers/FilterControlContainer\";\r\n\r\nclass FilterControls extends React.Component<\r\n  IFilterControlProps & IFilterControlDispatch,\r\n  {}\r\n> {\r\n  private handleChange = (event: any) => {\r\n    this.props.applyFilter(event.target.value);\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <FormControl>\r\n        <FormLabel>Filter</FormLabel>\r\n        <Grid container={true}>\r\n          <RadioGroup\r\n            value={this.props.filterType}\r\n            onChange={this.handleChange}\r\n            style={{ flexDirection: \"row\" }}\r\n          >\r\n            <FormControlLabel\r\n              value=\"all\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"All\"\r\n              className=\"MuiGrid-grid-sm-4-100\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"active\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"Active\"\r\n              className=\"MuiGrid-grid-sm-4-100\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"completed\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"Completed\"\r\n              className=\"MuiGrid-grid-sm-4-100\"\r\n            />\r\n          </RadioGroup>\r\n        </Grid>\r\n      </FormControl>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterControls;\r\n","import { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { applyFilter } from \"../actions/todos\";\r\n\r\nimport FilterControls from \"../components/FilterControls\";\r\nimport { IReduxStore } from \"../model/store\";\r\n\r\nexport interface IFilterControlDispatch {\r\n  applyFilter: (value: string) => void;\r\n}\r\n\r\nexport interface IFilterControlProps {\r\n  filterType: string;\r\n}\r\n\r\nconst mapStateToProps = (store: IReduxStore): IFilterControlProps => {\r\n  return {\r\n    filterType: store.toDos.filterType\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): IFilterControlDispatch => ({\r\n  applyFilter: (value: string) => dispatch(applyFilter(value))\r\n});\r\n\r\nconst FilterControlContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FilterControls);\r\n\r\nexport default FilterControlContainer;\r\n","import * as React from \"react\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport { IToDoItemProps } from \"../containers/ToDoItemContainer\";\r\n\r\ninterface IProps {\r\n  id: string;\r\n  isCompleted: boolean;\r\n  value: string;\r\n}\r\n\r\ninterface IStates {\r\n  isEditing: boolean;\r\n  newItem: string;\r\n}\r\n\r\nclass ToDoItem extends React.Component<IProps & IToDoItemProps, IStates> {\r\n  constructor(props: IProps & IToDoItemProps) {\r\n    super(props);\r\n    this.state = {\r\n      isEditing: false,\r\n      newItem: this.props.value\r\n    };\r\n  }\r\n\r\n  private onTextUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({ newItem: event.target.value });\r\n  };\r\n\r\n  private toggleStatus = () => {\r\n    this.props.toggleItem(this.props.id);\r\n  };\r\n\r\n  private updateItem = () => {\r\n    this.setState({ isEditing: false });\r\n    this.props.updateItem(this.props.id, this.state.newItem);\r\n  };\r\n\r\n  private removeItem = () => {\r\n    this.props.removeItem(this.props.id);\r\n  };\r\n\r\n  private toggleEdit = () => {\r\n    this.setState({ isEditing: true });\r\n  };\r\n\r\n  private renderForm = () => {\r\n    return (\r\n      <div>\r\n        <ListItem>\r\n          <TextField\r\n            style={{ width: \"100%\" }}\r\n            onChange={this.onTextUpdate}\r\n            value={this.state.newItem}\r\n          />\r\n\r\n          <IconButton aria-label=\"Save\" onClick={this.updateItem}>\r\n            <SaveIcon />\r\n          </IconButton>\r\n        </ListItem>\r\n        <Divider />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  private renderItem = () => {\r\n    const itemClass = this.props.isCompleted ? \"completed\" : \"active\";\r\n    return (\r\n      <div>\r\n        <ListItem\r\n          className={itemClass}\r\n          onClick={this.toggleStatus}\r\n          button={true}\r\n        >\r\n          <Checkbox checked={this.props.isCompleted} />\r\n          <ListItemText primary={this.props.value} />\r\n          <ListItemSecondaryAction>\r\n            <IconButton aria-label=\"Edit\" onClick={this.toggleEdit}>\r\n              <EditIcon />\r\n            </IconButton>\r\n            <IconButton aria-label=\"Delete\" onClick={this.removeItem}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n        <Divider />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  public render() {\r\n    if (this.state.isEditing) {\r\n      return this.renderForm();\r\n    } else {\r\n      return this.renderItem();\r\n    }\r\n  }\r\n}\r\n\r\nexport default ToDoItem;\r\n","import ToDoItem from \"../components/ToDoItem\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { removeItem, toggleItem, updateItem } from \"../actions/todos\";\r\n\r\nexport interface IToDoItemProps {\r\n  toggleItem: (id: string) => void;\r\n  removeItem: (id: string) => void;\r\n  updateItem: (id: string, newValue: string) => void;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): IToDoItemProps => {\r\n  return {\r\n    toggleItem: (id: string) => dispatch(toggleItem(id)),\r\n    removeItem: (id: string) => dispatch(removeItem(id)),\r\n    updateItem: (id: string, newValue: string) =>\r\n      dispatch(updateItem(id, newValue))\r\n  };\r\n};\r\n\r\nconst ToDoItemContainer = connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(ToDoItem);\r\n\r\nexport default ToDoItemContainer;\r\n","import * as React from \"react\";\r\nimport ToDoItemContainer from \"../containers/ToDoItemContainer\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\nimport {\r\n  IToDoListDispatch,\r\n  IToDoListProps\r\n} from \"../containers/ToDoListContainer\";\r\nimport { IToDoItem } from \"../model/store\";\r\n\r\ninterface IStates {\r\n  toDoList: IToDoItem[];\r\n}\r\n\r\nclass ToDoList extends React.Component<\r\n  IToDoListProps & IToDoListDispatch,\r\n  IStates\r\n> {\r\n  constructor(props: IToDoListProps & IToDoListDispatch) {\r\n    super(props);\r\n    this.state = {\r\n      toDoList: []\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Grid\r\n        item={true}\r\n        xs={12}\r\n        className={`list-container filter-${this.props.filterType}`}\r\n      >\r\n        <List className=\"list\">\r\n          {this.props.toDoList.map((item, index) => {\r\n            return (\r\n              <ToDoItemContainer\r\n                key={index}\r\n                id={item.id}\r\n                isCompleted={item.isCompleted}\r\n                value={item.value}\r\n              />\r\n            );\r\n          })}\r\n        </List>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoList;\r\n","import ToDoList from \"../components/ToDoList\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nimport { initToDoList } from \"../actions/todos\";\r\nimport { IReduxStore, IToDoItem } from \"../model/store\";\r\n\r\nexport interface IToDoListDispatch {\r\n  initList: () => void;\r\n}\r\n\r\nexport interface IToDoListProps {\r\n  toDoList: IToDoItem[];\r\n  filterType: string;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): IToDoListDispatch => ({\r\n  initList: () => dispatch(initToDoList())\r\n});\r\n\r\nconst mapStateToProps = (store: IReduxStore): IToDoListProps => {\r\n  const list = Object.keys(store.toDos.toDoList)\r\n    .map(key => store.toDos.toDoList[key])\r\n    .filter(item => {\r\n      if (store.toDos.filterType === \"all\") {\r\n        return true;\r\n      } else if (store.toDos.filterType === \"active\") {\r\n        return !item.isCompleted;\r\n      } else if (store.toDos.filterType === \"completed\") {\r\n        return item.isCompleted;\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n  return {\r\n    toDoList: list,\r\n    filterType: store.toDos.filterType\r\n  };\r\n};\r\n\r\nconst ToDoListContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ToDoList);\r\n\r\nexport default ToDoListContainer;\r\n","import * as React from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport Header from \"./components/Header\";\r\nimport AddItemFormContainer from \"./containers/AddItemFormContainer\";\r\nimport FilterControlContainer from \"./containers/FilterControlContainer\";\r\nimport ToDoListContainer from \"./containers/ToDoListContainer\";\r\n\r\nimport { loadStore } from \"./actions/todos\";\r\nimport { IReduxStore } from \"./model/store\";\r\n\r\ninterface IProps {\r\n  loadStore: (store: IReduxStore) => void;\r\n}\r\n\r\nclass App extends React.Component<IProps, {}> {\r\n  public componentDidMount() {\r\n    // Get saved user data from cache\r\n    const persistedState = localStorage.getItem(\"reduxState\")\r\n      ? JSON.parse(localStorage.getItem(\"reduxState\") || \"\")\r\n      : {};\r\n    if (persistedState) {\r\n      this.props.loadStore(persistedState);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <CssBaseline />\r\n        <div className=\"page\">\r\n          <Header />\r\n          <div className=\"inner-page\">\r\n            <Grid className={`main-grid`} container={true}>\r\n              <AddItemFormContainer />\r\n              <FilterControlContainer />\r\n              <ToDoListContainer />\r\n            </Grid>\r\n          </div>\r\n        </div>\r\n        <footer>\r\n          Built with <a href=\"https://reactjs.org/\">React</a> by\r\n          <a href=\"https://www.kazyamada.com\">Kazuki Yamada</a>.{\" \"}\r\n          <a href=\"https://github.com/kaz-yamada/React-Redux-Todo-List\">\r\n            Source\r\n          </a>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): IProps => ({\r\n  loadStore: (store: IReduxStore) => dispatch(loadStore(store))\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(App);\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./reducers\";\r\n\r\nimport App from \"./App\";\r\n\r\nimport \"./styles/index.scss\";\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(\"reduxState\", JSON.stringify(store.getState()));\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\") as HTMLElement\r\n);\r\n"],"sourceRoot":""}