{"version":3,"sources":["reducers/todo.ts","reducers/index.ts","containers/header.tsx","components/addItem.tsx","actions/todos.ts","components/filter.tsx","components/toDoItem.tsx","containers/toDoList.tsx","views/home.tsx","App.tsx","index.tsx"],"names":["defaultToDo","toDoList","filterType","middleware","applyMiddleware","logger","reducers","combineReducers","toDos","state","arguments","length","undefined","action","uuid","require","type","newId","Object","objectSpread","defineProperty","id","value","payload","status","newStatus","store","createStore","Header","react","className","AppBar_default","a","Toolbar_default","Typography_default","variant","color","React","AddItem","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","newItemText","addToDoItem","setState","updateText","event","target","Grid_default","container","alignItems","item","sm","TextField_default","label","fullWidth","onChange","Button_default","onClick","connect","dispatch","FilterList","handleChange","changeFilter","FormControl_default","FormLabel_default","RadioGroup_default","option","style","flexDirection","FormControlLabel_default","control","Radio_default","ToDoItem","toggleStatus","removeItem","itemClass","isFiltered","ListItem_default","button","Checkbox_default","checked","ListItemText_default","primary","ListItemSecondaryAction_default","IconButton_default","aria-label","Delete_default","Divider_default","ToDoList","toggleItem","toggleFilters","applyFilter","filterActive","persistedState","localStorage","getItem","JSON","parse","loadStore","_this2","concat","addItem","components_filter","xs","List_default","map","index","toDoItem","key","todos","list","keys","filter","getListFromStore","toConsumableArray","sort","b","initList","Home","header","Paper_default","justify","App","CssBaseline_default","home","subscribe","setItem","stringify","getState","ReactDOM","es","src_App","document","getElementById"],"mappings":"0NAEaA,EAA0B,CACrCC,SAAU,GACVC,WAAY,mBCCRC,EAAaC,YAAgBC,KAC7BC,EAAWC,YAAgB,CAAEC,MDCpB,WAGD,IAFZC,EAEYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFQV,EACpBa,EACYH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACNE,EAAOC,EAAQ,KAErB,OAAQF,EAAOG,MACb,IAAK,eACH,IAAMC,EAAQH,IACd,OAAOI,OAAAC,EAAA,EAAAD,CAAA,GACFT,EADL,CAEER,SAASiB,OAAAC,EAAA,EAAAD,CAAA,GACJT,EAAMR,SADHiB,OAAAE,EAAA,EAAAF,CAAA,GAELD,EAAQ,CAAEI,GAAIJ,EAAOK,MAAOT,EAAOU,QAASC,QAAQ,OAI3D,IAAK,uBACH,OAAON,OAAAC,EAAA,EAAAD,CAAA,GACFT,GAGP,IAAK,eACH,OAAOS,OAAAC,EAAA,EAAAD,CAAA,GACFT,EADL,CAEEP,WAAYW,EAAOU,UAGvB,IAAK,cAKH,OAJId,EAAMR,SAASY,EAAOU,iBACjBd,EAAMR,SAASY,EAAOU,SAGxBL,OAAAC,EAAA,EAAAD,CAAA,GACFT,EADL,CAEER,SAASiB,OAAAC,EAAA,EAAAD,CAAA,GAAMT,EAAMR,YAGzB,IAAK,cACH,IAAMwB,GAAahB,EAAMR,SAASY,EAAOU,SAASC,OAGlD,OAFAf,EAAMR,SAASY,EAAOU,SAASC,OAASC,EAEjCP,OAAAC,EAAA,EAAAD,CAAA,GACFT,EADL,CAEER,SAASiB,OAAAC,EAAA,EAAAD,CAAA,GAAMT,EAAMR,YAGzB,IAAK,aACH,GAA4B,MAAxBY,EAAOU,QAAQf,MACjB,OAAOU,OAAAC,EAAA,EAAAD,CAAA,GAAKL,EAAOU,QAAQf,OAG/B,IAAK,iBAGL,QACE,OAAOU,OAAAC,EAAA,EAAAD,CAAA,GAAKT,OCvDLiB,EAAQC,YAAYrB,EAAUH,oJCc5ByB,mLAdX,OACEC,EAAA,qBAAKC,UAAU,UACbD,EAAA,cAACE,EAAAC,EAAD,KACEH,EAAA,cAACI,EAAAD,EAAD,KACEH,EAAA,cAACK,EAAAF,EAAD,CAAYG,QAAQ,QAAQC,MAAM,WAAlC,wBANSC,+ECafC,cACJ,SAAAA,EAAYC,GAA2B,IAAAC,EAAA,OAAAtB,OAAAuB,EAAA,EAAAvB,CAAAwB,KAAAJ,IACrCE,EAAAtB,OAAAyB,EAAA,EAAAzB,CAAAwB,KAAAxB,OAAA0B,EAAA,EAAA1B,CAAAoB,GAAAO,KAAAH,KAAMH,KAOAO,YAAc,WAChBN,EAAK/B,MAAMsC,cACbP,EAAKD,MAAMS,YAAYR,EAAK/B,MAAMsC,aAClCP,EAAKS,SAAS,CAAEF,YAAa,OAXMP,EAe/BU,WAAa,SAACC,GACpB,IAAM7B,EAAQ6B,EAAMC,OAAO9B,MACvBA,GACFkB,EAAKS,SAAS,CAAEF,YAAazB,KAf/BkB,EAAK/B,MAAQ,CACXsC,YAAa,IAJsBP,wEAuBrC,OACEX,EAAA,cAACwB,EAAArB,EAAD,CAAMsB,WAAW,EAAMxB,UAAU,WAAWyB,WAAW,YACrD1B,EAAA,cAACwB,EAAArB,EAAD,CAAMwB,MAAM,EAAMC,GAAI,GACpB5B,EAAA,cAAC6B,EAAA1B,EAAD,CACE2B,MAAM,iBACN7B,UAAU,gBACV8B,WAAW,EACXC,SAAUnB,KAAKQ,WACf5B,MAAOoB,KAAKjC,MAAMsC,eAGtBlB,EAAA,cAACwB,EAAArB,EAAD,CAAMwB,MAAM,GACV3B,EAAA,cAACiC,EAAA9B,EAAD,CACEG,QAAQ,YACRC,MAAM,UACNN,UAAU,kBACViC,QAASrB,KAAKI,aAJhB,qBApCYT,aAsDP2B,cACb,KALyB,SAACC,GAAD,MAA6C,CACtEjB,YAAa,SAAC1B,GAAD,OAAmB2C,ECpE3B,SAAqB3C,GAC1B,MAAO,CACLN,KAAM,eACNO,QAASD,GDiE8B0B,CAAY1B,OAGxC0C,CAGb1B,yFEvBa4B,6MAtCLC,aAAe,SAAChB,GACtBX,EAAKD,MAAM6B,aAAajB,EAAMC,OAAO9B,gFAGrC,OACEO,EAAA,cAACwC,EAAArC,EAAD,KACEH,EAAA,cAACyC,EAAAtC,EAAD,eACAH,EAAA,cAACwB,EAAArB,EAAD,CAAMsB,WAAW,GACfzB,EAAA,cAAC0C,EAAAvC,EAAD,CACEV,MAAOoB,KAAKH,MAAMiC,OAClBX,SAAUnB,KAAKyB,aACfM,MAAO,CAAEC,cAAe,QAExB7C,EAAA,cAAC8C,EAAA3C,EAAD,CACEV,MAAM,MACNsD,QAAS/C,EAAA,cAACgD,EAAA7C,EAAD,CAAOI,MAAM,YACtBuB,MAAM,MACN7B,UAAU,0BAEZD,EAAA,cAAC8C,EAAA3C,EAAD,CACEV,MAAM,SACNsD,QAAS/C,EAAA,cAACgD,EAAA7C,EAAD,CAAOI,MAAM,YACtBuB,MAAM,SACN7B,UAAU,0BAEZD,EAAA,cAAC8C,EAAA3C,EAAD,CACEV,MAAM,YACNsD,QAAS/C,EAAA,cAACgD,EAAA7C,EAAD,CAAOI,MAAM,YACtBuB,MAAM,YACN7B,UAAU,oCA9BCO,6JC6CVyC,8MAtCLC,aAAe,WACrBvC,EAAKD,MAAMO,YAAYN,EAAKD,MAAMiB,KAAKnC,GAAI,aAGrC2D,WAAa,WACnBxC,EAAKD,MAAMO,YAAYN,EAAKD,MAAMiB,KAAKnC,GAAI,mFAI3C,IAAM4D,EAAYvC,KAAKH,MAAMiB,KAAKhC,OAAS,YAAc,SACzD,OAAKkB,KAAKH,MAAM2C,WAKdrD,EAAA,yBACEA,EAAA,cAACsD,GAAAnD,EAAD,CACEF,UAAWmD,EACXlB,QAASrB,KAAKqC,aACdK,QAAQ,GAERvD,EAAA,cAACwD,GAAArD,EAAD,CACEsD,QAAS5C,KAAKH,MAAMiB,KAAKhC,OACzBY,MAAOM,KAAKH,MAAM2C,WAAa,YAAc,YAE/CrD,EAAA,cAAC0D,GAAAvD,EAAD,CAAcwD,QAAS9C,KAAKH,MAAMiB,KAAKlC,QACvCO,EAAA,cAAC4D,GAAAzD,EAAD,KACEH,EAAA,cAAC6D,GAAA1D,EAAD,CAAY2D,aAAW,SAAS5B,QAASrB,KAAKsC,YAC5CnD,EAAA,cAAC+D,GAAA5D,EAAD,SAINH,EAAA,cAACgE,GAAA7D,EAAD,OArBKH,EAAA,iCAZUQ,aCkBjByD,eAIJ,SAAAA,EAAYvD,GAAyC,IAAAC,EAAA,OAAAtB,OAAAuB,EAAA,EAAAvB,CAAAwB,KAAAoD,IACnDtD,EAAAtB,OAAAyB,EAAA,EAAAzB,CAAAwB,KAAAxB,OAAA0B,EAAA,EAAA1B,CAAA4E,GAAAjD,KAAAH,KAAMH,KAOAO,YAAc,SAACzB,EAAYL,GACpB,WAATA,EACFwB,EAAKD,MAAMyC,WAAW3D,GACJ,WAATL,GACTwB,EAAKD,MAAMwD,WAAW1E,IAZ2BmB,EAgB7CwD,cAAgB,SAAC1E,GACvBkB,EAAKD,MAAM0D,YAAY3E,IAfvBkB,EAAK/B,MAAQ,CACXR,SAAU,GACViG,cAAc,GAJmC1D,mFA0EnD,IAAM2D,EAAiBC,aAAaC,QAAQ,cACxCC,KAAKC,MAAMH,aAAaC,QAAQ,eAAiB,IACjD,GACAF,GACFzD,KAAKH,MAAMiE,UAAUL,GAGvBzD,KAAKO,SAAS,qCAGA,IAAAwD,EAAA/D,KACd,OACEb,EAAA,cAACwB,EAAArB,EAAD,CAAMF,UAAS,eAAA4E,OAAiBhE,KAAKH,MAAMrC,YAAcoD,WAAW,GAClEzB,EAAA,cAAC8E,EAAD,MACA9E,EAAA,cAAC+E,EAAD,CACEpC,OAAQ9B,KAAKH,MAAMrC,WACnBkE,aAAc1B,KAAKsD,gBAErBnE,EAAA,cAACwB,EAAArB,EAAD,CAAMwB,MAAM,EAAMqD,GAAI,IACpBhF,EAAA,cAACiF,EAAA9E,EAAD,KACGU,KAAKjC,MAAMR,SAAS8G,IAAI,SAACvD,EAAMwD,GAC9B,IAAI9B,GAAa,EAUjB,MAT8B,WAA1BuB,EAAKlE,MAAMrC,YAA2BsD,EAAKhC,OAC7C0D,GAAa,EAEa,cAA1BuB,EAAKlE,MAAMrC,YACVsD,EAAKhC,SAEN0D,GAAa,GAIbrD,EAAA,cAACoF,GAAD,CACEC,IAAKF,EACLA,MAAOA,EACPxD,KAAMiD,EAAKlE,MAAM4E,MAAM3D,EAAKnC,IAC5ByB,YAAa2D,EAAK3D,YAClBoC,WAAYA,4DA3D1B3C,EACA9B,GAEA,IAAI2G,EAAOlG,OAAOmG,KAAK9E,EAAM4E,OAAOJ,IAAI,SAAAG,GACtC,OAAO3E,EAAM4E,MAAMD,KAEjBI,GAAS,EAQb,MANyB,QAArB/E,EAAMrC,WACRoH,GAAS,EAETF,EAAOtB,EAASyB,iBAAiBhF,EAAM4E,MAAO5E,EAAMrC,YAG/C,CACLD,SAASiB,OAAAsG,EAAA,EAAAtG,CAAKkG,GACdlB,aAAcoB,UAxEGjF,aAAjByD,GAwBUyB,iBAAmB,SAC/BtH,EACAC,GAEA,IAAIkH,EAAOlG,OAAOmG,KAAKpH,GAAU8G,IAAI,SAAAG,GACnC,OAAOjH,EAASiH,KAuBlB,MApBmB,WAAfhH,EACFkH,EAAOA,EAAKK,KAAK,SAACzF,EAAG0F,GACnB,OAAI1F,EAAER,OACG,EACEkG,EAAElG,QACH,EAEH,IAEe,cAAftB,IACTkH,EAAOA,EAAKK,KAAK,SAACzF,EAAG0F,GACnB,OAAI1F,EAAER,QACI,EACCkG,EAAElG,OACJ,EAEF,KAIJ4F,GA0EX,IAeepD,eAPS,SAACtC,GACvB,MAAO,CACLyF,MAAOzF,EAAMlB,MAAMP,SACnBC,WAAYwB,EAAMlB,MAAMN,aAXD,SAAC+D,GAAD,MAA6C,CACtE0D,SAAU,kBAAM1D,EHxHT,CACLjD,KAAM,iBACNO,QAAS,MGuHXiF,UAAW,SAAC9E,GAAD,OAAwBuC,EHhI5B,CACLjD,KAAM,aACNO,QG8HoDG,KACtDqE,WAAY,SAAC1E,GAAD,OAAgB4C,EHvJvB,SAAoB5C,GACzB,MAAO,CACLL,KAAM,cACNO,QAASF,GGoJ0B0E,CAAW1E,KAChD2D,WAAY,SAAC3D,GAAD,OAAgB4C,EHjJvB,SAAoB5C,GACzB,MAAO,CACLL,KAAM,cACNO,QAASF,GG8I0B2D,CAAW3D,KAChD4E,YAAa,SAAC3E,GAAD,OAAmB2C,EH1IzB,CACLjD,KAAM,eACNO,QGwImDD,OAUxC0C,CAGb8B,IC/Ja8B,oLAbX,OACE/F,EAAA,qBAAKR,GAAG,OAAOS,UAAU,QACvBD,EAAA,cAACgG,EAAD,MACAhG,EAAA,cAACiG,EAAA9F,EAAD,CAAOF,UAAU,cACfD,EAAA,cAACwB,EAAArB,EAAD,CAAMF,UAAU,YAAYwB,WAAW,EAAMyE,QAAQ,UACnDlG,EAAA,cAAC5B,GAAD,gBAPOoC,aCQJ2F,oLATX,OACEnG,EAAA,qBAAKC,UAAU,OACbD,EAAA,cAACoG,EAAAjG,EAAD,MACAH,EAAA,cAACqG,GAAD,cALU7F,oBCIlBX,EAAMyG,UAAU,WACd/B,aAAagC,QAAQ,aAAc9B,KAAK+B,UAAU3G,EAAM4G,eAG1DC,SACE1G,EAAA,cAAC2G,EAAA,EAAD,CAAU9G,MAAOA,GACfG,EAAA,cAAC4G,GAAD,OAEFC,SAASC,eAAe","file":"static/js/main.0163f9a7.chunk.js","sourcesContent":["import { IAction, IToDoStore } from \"../model/store\";\r\n\r\nexport const defaultToDo: IToDoStore = {\r\n  toDoList: {},\r\n  filterType: \"all\"\r\n};\r\n\r\nexport default function todoReducer(\r\n  state: IToDoStore = defaultToDo,\r\n  action: IAction\r\n): IToDoStore {\r\n  const uuid = require(\"uuid/v4\");\r\n\r\n  switch (action.type) {\r\n    case \"ADD_NEW_ITEM\": {\r\n      const newId = uuid();\r\n      return {\r\n        ...state,\r\n        toDoList: {\r\n          ...state.toDoList,\r\n          [newId]: { id: newId, value: action.payload, status: false }\r\n        }\r\n      };\r\n    }\r\n    case \"UPDATE_ADD_ITEM_TEXT\": {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n    case \"APPLY_FILTER\": {\r\n      return {\r\n        ...state,\r\n        filterType: action.payload\r\n      };\r\n    }\r\n    case \"REMOVE_ITEM\": {\r\n      if (state.toDoList[action.payload]) {\r\n        delete state.toDoList[action.payload];\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toDoList: { ...state.toDoList }\r\n      };\r\n    }\r\n    case \"TOGGLE_ITEM\": {\r\n      const newStatus = !state.toDoList[action.payload].status;\r\n      state.toDoList[action.payload].status = newStatus;\r\n\r\n      return {\r\n        ...state,\r\n        toDoList: { ...state.toDoList }\r\n      };\r\n    }\r\n    case \"LOAD_STORE\": {\r\n      if (action.payload.toDos != null) {\r\n        return { ...action.payload.toDos };\r\n      }\r\n    }\r\n    case \"INIT_TODO_LIST\": {\r\n      return { ...state };\r\n    }\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n}\r\n","import logger from \"redux-logger\";\r\nimport toDos from \"./todo\";\r\n\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\n\r\nconst middleware = applyMiddleware(logger);\r\nconst reducers = combineReducers({ toDos });\r\n\r\nexport const store = createStore(reducers, middleware);\r\n","import * as React from \"react\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nclass Header extends React.Component<{}, {}> {\r\n  public render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <AppBar>\r\n          <Toolbar>\r\n            <Typography variant=\"title\" color=\"inherit\">\r\n              To Do List\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import * as React from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { addToDoItem } from \"../actions/todos\";\r\n\r\ninterface IDispatchFromProps {\r\n  addToDoItem: (value: string) => void;\r\n}\r\n\r\ninterface IState {\r\n  newItemText: string;\r\n}\r\n\r\nclass AddItem extends React.Component<IDispatchFromProps, IState> {\r\n  constructor(props: IDispatchFromProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      newItemText: \"\"\r\n    };\r\n  }\r\n\r\n  private handleClick = () => {\r\n    if (this.state.newItemText) {\r\n      this.props.addToDoItem(this.state.newItemText);\r\n      this.setState({ newItemText: \"\" });\r\n    }\r\n  };\r\n\r\n  private updateText = (event: any) => {\r\n    const value = event.target.value;\r\n    if (value) {\r\n      this.setState({ newItemText: value });\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <Grid container={true} className=\"add-item\" alignItems=\"flex-end\">\r\n        <Grid item={true} sm={6}>\r\n          <TextField\r\n            label=\"Enter New Item\"\r\n            className=\"add-item-text\"\r\n            fullWidth={true}\r\n            onChange={this.updateText}\r\n            value={this.state.newItemText}\r\n          />\r\n        </Grid>\r\n        <Grid item={true}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className=\"add-item-button\"\r\n            onClick={this.handleClick}\r\n          >\r\n            Add Item\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): IDispatchFromProps => ({\r\n  addToDoItem: (value: string) => dispatch(addToDoItem(value))\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(AddItem);\r\n","import { IAction, IReduxStore } from \"../model/store\";\r\n\r\nexport function addToDoItem(value: string): IAction {\r\n  return {\r\n    type: \"ADD_NEW_ITEM\",\r\n    payload: value\r\n  };\r\n}\r\n\r\nexport function updateAddItem(value: string): IAction {\r\n  return {\r\n    type: \"UPDATE_ADD_ITEM_TEXT\",\r\n    payload: value\r\n  };\r\n}\r\n\r\nexport function toggleItem(id: string): IAction {\r\n  return {\r\n    type: \"TOGGLE_ITEM\",\r\n    payload: id\r\n  };\r\n}\r\n\r\nexport function removeItem(id: string): IAction {\r\n  return {\r\n    type: \"REMOVE_ITEM\",\r\n    payload: id\r\n  };\r\n}\r\n\r\nexport function applyFilter(filterName: string): IAction {\r\n  return {\r\n    type: \"APPLY_FILTER\",\r\n    payload: filterName\r\n  };\r\n}\r\n\r\nexport function loadStore(list: IReduxStore) {\r\n  return {\r\n    type: \"LOAD_STORE\",\r\n    payload: list\r\n  };\r\n}\r\n\r\nexport function initToDoList(): IAction {\r\n  return {\r\n    type: \"INIT_TODO_LIST\",\r\n    payload: \"\"\r\n  };\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\ninterface IProps {\r\n  option: string;\r\n  changeFilter: (value: string) => void;\r\n}\r\n\r\nclass FilterList extends React.Component<IProps, {}> {\r\n  private handleChange = (event: any) => {\r\n    this.props.changeFilter(event.target.value);\r\n  };\r\n  public render() {\r\n    return (\r\n      <FormControl>\r\n        <FormLabel>Filter</FormLabel>\r\n        <Grid container={true}>\r\n          <RadioGroup\r\n            value={this.props.option}\r\n            onChange={this.handleChange}\r\n            style={{ flexDirection: \"row\" }}\r\n          >\r\n            <FormControlLabel\r\n              value=\"all\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"All\"\r\n              className=\"MuiGrid-grid-sm-4-100\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"active\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"Active\"\r\n              className=\"MuiGrid-grid-sm-4-100\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"completed\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"Completed\"\r\n              className=\"MuiGrid-grid-sm-4-100\"\r\n            />\r\n          </RadioGroup>\r\n        </Grid>\r\n      </FormControl>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterList;\r\n","import * as React from \"react\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport { IToDoItem } from \"../model/store\";\r\n\r\ninterface IProps {\r\n  index: number;\r\n  item: IToDoItem;\r\n  isFiltered: boolean;\r\n  handleClick: (id: string, type: string) => void;\r\n}\r\n\r\nclass ToDoItem extends React.Component<IProps, {}> {\r\n  private toggleStatus = () => {\r\n    this.props.handleClick(this.props.item.id, \"status\");\r\n  };\r\n\r\n  private removeItem = () => {\r\n    this.props.handleClick(this.props.item.id, \"remove\");\r\n  };\r\n\r\n  public render() {\r\n    const itemClass = this.props.item.status ? \"completed\" : \"active\";\r\n    if (!this.props.isFiltered) {\r\n      return <div />;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <ListItem\r\n          className={itemClass}\r\n          onClick={this.toggleStatus}\r\n          button={true}\r\n        >\r\n          <Checkbox\r\n            checked={this.props.item.status}\r\n            color={this.props.isFiltered ? \"secondary\" : \"default\"}\r\n          />\r\n          <ListItemText primary={this.props.item.value} />\r\n          <ListItemSecondaryAction>\r\n            <IconButton aria-label=\"Delete\" onClick={this.removeItem}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n        <Divider />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoItem;\r\n","import * as React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nimport {\r\n  applyFilter,\r\n  initToDoList,\r\n  loadStore,\r\n  removeItem,\r\n  toggleItem\r\n} from \"../actions/todos\";\r\nimport AddItem from \"../components/addItem\";\r\nimport FilterList from \"../components/filter\";\r\nimport ToDoItem from \"../components/toDoItem\";\r\nimport { IReduxStore, IToDoItem, ITodoList } from \"../model/store\";\r\n\r\ninterface IStoreProps {\r\n  todos: ITodoList;\r\n  filterType: string;\r\n}\r\n\r\ninterface IDispatchFromProps {\r\n  initList: () => void;\r\n  loadStore: (store: IReduxStore) => void;\r\n  toggleItem: (id: string) => void;\r\n  removeItem: (id: string) => void;\r\n  applyFilter: (value: string) => void;\r\n}\r\n\r\ninterface IStates {\r\n  toDoList: IToDoItem[];\r\n  filterActive: boolean;\r\n}\r\n\r\nclass ToDoList extends React.Component<\r\n  IStoreProps & IDispatchFromProps,\r\n  IStates\r\n> {\r\n  constructor(props: IStoreProps & IDispatchFromProps) {\r\n    super(props);\r\n    this.state = {\r\n      toDoList: [],\r\n      filterActive: false\r\n    };\r\n  }\r\n\r\n  private handleClick = (id: string, type: string) => {\r\n    if (type === \"remove\") {\r\n      this.props.removeItem(id);\r\n    } else if (type === \"status\") {\r\n      this.props.toggleItem(id);\r\n    }\r\n  };\r\n\r\n  private toggleFilters = (value: string) => {\r\n    this.props.applyFilter(value);\r\n  };\r\n\r\n  public static getListFromStore = (\r\n    toDoList: ITodoList,\r\n    filterType: string\r\n  ) => {\r\n    let list = Object.keys(toDoList).map(key => {\r\n      return toDoList[key];\r\n    });\r\n\r\n    if (filterType === \"active\") {\r\n      list = list.sort((a, b) => {\r\n        if (a.status) {\r\n          return 1;\r\n        } else if (b.status) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n    } else if (filterType === \"completed\") {\r\n      list = list.sort((a, b) => {\r\n        if (a.status) {\r\n          return -1;\r\n        } else if (b.status) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n\r\n    return list;\r\n  };\r\n\r\n  public static getDerivedStateFromProps(\r\n    props: IStoreProps & IDispatchFromProps,\r\n    state: IStates\r\n  ) {\r\n    let list = Object.keys(props.todos).map(key => {\r\n      return props.todos[key];\r\n    });\r\n    let filter = true;\r\n\r\n    if (props.filterType === \"all\") {\r\n      filter = false;\r\n    } else {\r\n      list = ToDoList.getListFromStore(props.todos, props.filterType);\r\n    }\r\n\r\n    return {\r\n      toDoList: [...list],\r\n      filterActive: filter\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    // Get saved user data from cache\r\n    const persistedState = localStorage.getItem(\"reduxState\")\r\n      ? JSON.parse(localStorage.getItem(\"reduxState\") || \"\")\r\n      : {};\r\n    if (persistedState) {\r\n      this.props.loadStore(persistedState);\r\n    }\r\n\r\n    this.setState({});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Grid className={`list filter-${this.props.filterType}`} container={true}>\r\n        <AddItem />\r\n        <FilterList\r\n          option={this.props.filterType}\r\n          changeFilter={this.toggleFilters}\r\n        />\r\n        <Grid item={true} xs={12}>\r\n          <List>\r\n            {this.state.toDoList.map((item, index) => {\r\n              let isFiltered = true;\r\n              if (this.props.filterType === \"active\" && item.status) {\r\n                isFiltered = false;\r\n              } else if (\r\n                this.props.filterType === \"completed\" &&\r\n                !item.status\r\n              ) {\r\n                isFiltered = false;\r\n              }\r\n\r\n              return (\r\n                <ToDoItem\r\n                  key={index}\r\n                  index={index}\r\n                  item={this.props.todos[item.id]}\r\n                  handleClick={this.handleClick}\r\n                  isFiltered={isFiltered}\r\n                />\r\n              );\r\n            })}\r\n          </List>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): IDispatchFromProps => ({\r\n  initList: () => dispatch(initToDoList()),\r\n  loadStore: (store: IReduxStore) => dispatch(loadStore(store)),\r\n  toggleItem: (id: string) => dispatch(toggleItem(id)),\r\n  removeItem: (id: string) => dispatch(removeItem(id)),\r\n  applyFilter: (value: string) => dispatch(applyFilter(value))\r\n});\r\n\r\nconst mapStateToProps = (store: IReduxStore) => {\r\n  return {\r\n    todos: store.toDos.toDoList,\r\n    filterType: store.toDos.filterType\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ToDoList);\r\n","import * as React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Header from \"../containers/header\";\r\nimport ToDoList from \"../containers/toDoList\";\r\n\r\nclass Home extends React.Component<{}, {}> {\r\n  public render() {\r\n    return (\r\n      <div id=\"home\" className=\"page\">\r\n        <Header />\r\n        <Paper className=\"inner-page\">\r\n          <Grid className=\"todo-list\" container={true} justify=\"center\">\r\n            <ToDoList />\r\n          </Grid>\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import * as React from \"react\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Home from \"./views/home\";\r\n\r\nclass App extends React.Component<{}, {}> {\r\n  public render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <CssBaseline />\r\n        <Home />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./reducers\";\r\n\r\nimport App from \"./App\";\r\n\r\nimport \"./styles/index.scss\";\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem(\"reduxState\", JSON.stringify(store.getState()));\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\") as HTMLElement\r\n);\r\n"],"sourceRoot":""}